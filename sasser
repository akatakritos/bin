#!/usr/bin/env ruby
# Parses a CodeKit config file and processes all sass files defined within.
#
# $ sasser
#   Finds all .scss files that are marked for compilation and compiles them
#
# $ sasser --watch
#   Finds all .scss files marked for compilation and watches them for changes,
#   compiling them on modification
#
require 'json'
require 'optparse'
require 'pathname'

class SassFile
  attr_reader :input, :output

  def initialize(input, output)
    @input  = relative_from_cwd(input)
    @output = relative_from_cwd(output)
  end

  private
    def relative_from_cwd(abs_path)
      Pathname.new(abs_path).relative_path_from(Pathname.new(Dir.pwd))
    end
end


class Sasser
  attr_reader :config, :codekit_dir

  def initialize(dry_run = false)
    @dry_run = dry_run
    @codekit_dir = find_codekit_dir
    @config = JSON.parse(File.read(codekit_dir + "/config.codekit"))
  end

  def dry_run?
    @dry_run
  end

  def compile
    sass_files do |sass|
      puts "processing #{sass.input}"
      system "sass --style compressed #{sass.input} #{sass.output}"
    end
  end

  def watch
    cmd ="sass --style compressed --watch #{sass_files.map { |f| "#{f.input}:#{f.output}" }.join(' ') }"
    exec cmd
  end

  private

    def exec(cmd)
      puts cmd
      super(cmd) unless dry_run?
    end

    def system(cmd)
      if dry_run?
        puts cmd
      else
        super(cmd)
      end
    end

    def find_codekit_dir
      dir = File.expand_path(".")
      while dir != "/" && !File.exist?(dir + "/config.codekit")
        dir = File.expand_path(dir + "/..")
      end
      dir
    end

    def in_subdir?(full_path)
      full_path.start_with?(Dir.pwd)
    end

    def sass_files
      return to_enum(:sass_files) unless block_given?

      config['files'].each do |file, c|
        fullpath = File.expand_path(codekit_dir + c['inputAbbreviatedPath'])
        fulloutpath = File.expand_path(codekit_dir + c['outputAbbreviatedPath'])
        yield SassFile.new(fullpath, fulloutpath) if file.match(/\.scss$/) && c['ignore'] == 0 && in_subdir?(fullpath)
      end
    end


end


options = {
  :watch => false,
  :dryrun => false
};

OptionParser.new { |opts| 
  opts.banner =  "Usage: sasser [options]"

  opts.on("--watch", 'watch the sass files for changes') do
    options[:watch] = true
  end

  opts.on("--dry-run") do
    options[:dryrun] = true
  end
}.parse!


sasser = Sasser.new(options[:dryrun])
if options[:watch]
  sasser.watch
else
  sasser.compile
end
